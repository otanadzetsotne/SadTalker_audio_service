# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import services.audio2video.audio2video_pb2 as audio2video__pb2


class VideoFromAudioGeneratorStub(object):
    """The gRPC service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.VideoFromAudio = channel.unary_unary(
                '/video_from_audio_generator.VideoFromAudioGenerator/VideoFromAudio',
                request_serializer=audio2video__pb2.AudioRequest.SerializeToString,
                response_deserializer=audio2video__pb2.VideoResponse.FromString,
                )
        self.CheckHealth = channel.unary_unary(
                '/video_from_audio_generator.VideoFromAudioGenerator/CheckHealth',
                request_serializer=audio2video__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=audio2video__pb2.HealthCheckResponse.FromString,
                )


class VideoFromAudioGeneratorServicer(object):
    """The gRPC service definition
    """

    def VideoFromAudio(self, request, context):
        """Sends audio data and receives a video file
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckHealth(self, request, context):
        """Added for health check
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VideoFromAudioGeneratorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'VideoFromAudio': grpc.unary_unary_rpc_method_handler(
                    servicer.VideoFromAudio,
                    request_deserializer=audio2video__pb2.AudioRequest.FromString,
                    response_serializer=audio2video__pb2.VideoResponse.SerializeToString,
            ),
            'CheckHealth': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckHealth,
                    request_deserializer=audio2video__pb2.HealthCheckRequest.FromString,
                    response_serializer=audio2video__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'video_from_audio_generator.VideoFromAudioGenerator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VideoFromAudioGenerator(object):
    """The gRPC service definition
    """

    @staticmethod
    def VideoFromAudio(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/video_from_audio_generator.VideoFromAudioGenerator/VideoFromAudio',
            audio2video__pb2.AudioRequest.SerializeToString,
            audio2video__pb2.VideoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckHealth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/video_from_audio_generator.VideoFromAudioGenerator/CheckHealth',
            audio2video__pb2.HealthCheckRequest.SerializeToString,
            audio2video__pb2.HealthCheckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
